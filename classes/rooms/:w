from classes.ship_entity import *

class Room_Farm(ShipRoom):

    INIT_AVG_DAYS_TILL_HARVEST = 10
    INIT_AVG_YIELD_AMOUNT = 100
    INIT_ITEM_YIELD_TYPES = ['grain','fruit+veg','protein']
    INIT_DEFAULT_ITEM = 'grain'

    INIT_DEFAULT_PLANT_REQ_ITEMS = {
        "water":1,
        "growth cells":2,
        "farming supplies":1,
        "farming tools":1
    }

    INIT_DEFAULT_STEP_REQ_ITEMS = {
        "water":1
    }

    INIT_DEFAULT_HARVEST_REQ_ITEMS = {
        "water":1,
        "farming supplies":2,
        "farming tools":1
    }

    #TODO % chance of losing some items

    def __init__(self,ship):
        ShipRoom.__init__(self,ship)
        self.type = "farm"
        self.item_type = Room_Farm.INIT_DEFAULT_ITEM
        self.days_till_harvest = 0
        self.ready_to_plant = True
        self.yield_amount = Room_Farm.INIT_AVG_YIELD_AMOUNT

    def _calc_days_till_harvest(self):
        #TODO - yield based on employees
        #TODO - time based on employees
        #TODO - cannot start without enough employees
        #TODO - items dont remove or have a % of removing

        unmet_criteria = self.ship.get_unmet_criteria(Room_Farm.INIT_DEFAULT_PLANT_REQ_ITEMS)

        if unmet_criteria:
            self.ship._add_log(2,"Cannot process farm. Requirments not met: "+str(unmet_criteria))
            return False
        else:
            self.ship.remove_items(Room_Farm.INIT_DEFAULT_PLANT_REQ_ITEMS)
            self.ship._add_log(1,str(self.item_type)+" farm planted.")
            self.days_till_harvest = Room_Farm.INIT_AVG_DAYS_TILL_HARVEST
            self.ready_to_plant = False

    def daily_step(self,ship):
        if self.ready_to_plant == True:
            self._calc_days_till_harvest()
        else:
            if self.days_till_harvest <= 0:
                self._harvest()
            else:
                #TODO - small bonus for employees - % to increase yield
                unmet_criteria = self.ship.get_unmet_criteria(Room_Farm.INIT_DEFAULT_STEP_REQ_ITEMS)

                if unmet_criteria:
                    self.ship._add_log(2,"Cannot process farm. Requirments not met: "+str(unmet_criteria))
                    return False
                    for k,v in unmet_criteria.items():
                        message += str(k)+":"+str(v)+","
                    self.ship._add_warning("Farm cannot grow. Requirements not met: "+str(message))
                    # % chance at affecting yield
                else:
                    #TODO - removing bulk items can be ship function
                    for k,v in Room_Farm.INIT_DEFAULT_PLANT_REQ_RESOURCES.items():
                        self.ship._remove_resources(k,v)
                    self.days_till_harvest -=1
    
    def _harvest(self):
        '''
        unmet_criteria = {}
        for k,v in Room_Farm.INIT_DEFAULT_HARVEST_REQ_ITEMS.items():
            if not self.ship._get_total_items(k)[0] >= v:
                unmet_criteria[k] = v

        if unmet_criteria:
            message = ""
            for k,v in unmet_criteria.items():
                message += str(k)+":"+str(v)+","
            self.ship._add_warning("Cannot harvest. Requirements not met: "+str(message))
            # % chance at affecting yield
        else:
            #TODO - removing bulk items can be ship function
            for k,v in Room_Farm.INIT_DEFAULT_HARVEST_REQ_ITEMS.items():
                self.ship._remove_resources(k,v)
            #TODO - use items to process harvest
            #TODO - yield based on employees
            #TODO - cannot start without employees
            self.ship._add_log("harvest time")
            self.ready_to_plant = True
        '''
